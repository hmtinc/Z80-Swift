//
//  Test.swift
//  Z80
//
//  Created by Harsh Mistry on 2017-04-17.
//  Copyright Â© 2017 Harsh Mistry  Inc. All rights reserved.
//
import Foundation

var events = [String]()
var intialMemory : [UInt16 : UInt8]
var dirtyMemory : [UInt16 : UInt8]


func (z80 *Z80) DumpRegisters(out : inout [String]) {
	var halted : UInt8

	if Halted {
		halted = 1
	} else {
		halted = 0
	}

	out.append(String(format : "%02x%02x %02x%02x %02x%02x %02x%02x %02x%02x %02x%02x %02x%02x %02x%02x %02x%02x %02x%02x %04x %04x\n",
		intArr[A], intArr[F, intArr[B], intArr[C], intArr[D], intArr[E], intArr[H], intArr[L], intArr[A_], intArr[F_], intArr[B_], intArr[C_], intArr[D_], intArr[E_], intArr[H_], intArr[L_], intArr[IXH], intArr[IXL], intArr[IYH], intArr[IYL], sp, pc))
	out.append(String(format :"%02x %02x %d %d %d %d %d\n", I, (R7&0x80)|UInt8(R&0x7f),
		intArr[IFF1], intArr[IFF2], intArr[IM], halted, Tstates))
}

func (memory *testMemory) DumpMemory(out : inout [String]) {
	var addresses = [Int]()

	for address in data_map{
		address.append(int(address))
	}

	//Sort Address 
	addresses.sort()

	var addressCount = addresses.count
	var i = 0

	while i < addressCount {
		var addr = UInt16(addresses[i])

		if memory.Read(addr) == initialMemory[addr] {
			continue
		}

		var line = String(format : "%04x ", addr)

		for (memory.Read(addr) != initialMemory[addr]) || dirtyMemory[addr] {
			line += String(format :"%02x ", memory.Read(addr))
			addr += 1
			i += 1

			if i >= addresses.count {
				break
			}
			if addresses[i] != int(addr) {
				i--
				break
			}
		}

		line += "-1\n"
		out.append(line)
	}
}

func contendMemory(address : UInt16, time : UInt) {
	var tempstate = Tstates 
	tempstate += time
	Tstates = tempstate
}

func contendPort(time uint) {
	Tstates += time
}


let maxLines = 20000
